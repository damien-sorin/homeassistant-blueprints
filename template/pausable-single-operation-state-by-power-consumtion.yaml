blueprint:
  name: Pausable Single Operation State by Power Consumption
  description: |
    
    # Pausable Single Operation State by Power Consumption

    A template sensor which holds an operational state based on a referenced power consumption entity.
    
    It assumes that the 'running' operation can be paused and resumed before regular finish.

    The states are 'off', 'on', 'running', 'finish/paused', and 'interrupted by power supply'.
    
    ## More Info

    ℹ️ Version 2025.08.1

  domain: template
  source_url: https://github.com/damien-sorin/homeassistant-blueprints/blob/main/template/pausable-single-operation-state-by-power-consumtion.yaml
  input:

    reference_power_consumption_entity_input:
      name: Current Power Consumption Sensor
      description: sensor entity delivering the current power consumption in Watt.
      selector:
        entity:
          multiple: false
          filter:
            device_class: power

    power_value_off_max_input:
      name: Off State - Max Power Consumption   
      description: The max power consumption to assume the device is in 'off' state.
      default: 0.1
      selector:
        number:
          min: 0
          max: 3600
          step: 0.1
          unit_of_measurement: W
          mode: box

    power_value_idle_min_input:
      name: On State - Min Power Consumption   
      description: The min power consumption to assume the device is in 'on' but not 'running' state.
      default: 0.2
      selector:
        number:
          min: 0
          max: 3600
          step: 0.1
          unit_of_measurement: W
          mode: box

    power_value_idle_max_input:
      name: On State - Max Power Consumption   
      description: The max power consumption to assume the device is in 'on' but not 'running' state.
      default: 4.0
      selector:
        number:
          min: 0
          max: 3600
          step: 0.1
          unit_of_measurement: W
          mode: box

    power_value_running_min_input:
      name: Running State - Min Power Consumption   
      description: The max power consumption to assume the device is in 'running' state.
      default: 30.0
      selector:
        number:
          min: 0
          max: 3600
          step: 0.1
          unit_of_measurement: W
          mode: box

variables:
  power_sensor: !input reference_power_consumption_entity_input

  power_value_off_max: !input power_value_off_max_input
  power_value_idle_min: !input power_value_idle_min_input
  power_value_idle_max: !input power_value_idle_max_input
  power_value_runnin_min: !input power_value_running_min_input

  state_unknown: 'unknown'
  state_off: 'off'
  state_on: 'on'
  state_running: 'running'
  state_finished_paused: 'finished/paused'
  state_interrupted: 'interrupted by power supply'

sensor:
  availability: >
    {{ states(power_sensor) not in ('unknown', 'unavailable') }}
  # delay_on: not_used
  # delay_off: not_used
  # auto_off: not_used
  state: >
    {% set next_state = state_unknown %}

    {% set power_sensor_state = states(power_sensor) %}
    
    {% if power_sensor_state | is_number %}

      {% set current_power = power_sensor_state | float(0) %}

      {% set current_state = this.state %}
      {% if current_state in [None, '', 'unavailable'] %}
          {% set current_state = state_unknown %}
      {% endif %}

      {% set next_state = current_state %}

      {% if current_state == state_unknown %}

        {% if current_power <= power_value_off_max %}
          {% set next_state = state_off %}
        {% elif current_power <= power_value_runnin_min %}
          {% set next_state = state_on %}
        {% else %}
          {% set next_state = state_running %}
        {% endif %}

      {% elif current_state == state_off %}

        {% if current_power > power_value_off_max %}
          {% set next_state = state_on %}
        {% endif %}

      {% elif current_state == state_on %}

        {% if current_power <= power_value_off_max %}
          {% set next_state = state_off %}
        {% elif current_power > power_value_runnin_min %}
          {% set next_state = state_running %}
        {% endif %}

      {% elif current_state == state_running %}

        {% if current_power <= power_value_off_max %}
          {% set next_state = state_interrupted %}
        {% elif current_power > power_value_idle_min and current_power <= power_value_idle_max %}
          {% set next_state = state_finished_paused %}
        {% endif %}
      
      {% elif current_state == state_finished_paused %}

        {% if current_power <= power_value_off_max %}
          {% set next_state = state_off %}
        {% elif current_power > power_value_runnin_min %}
          {% set next_state = state_running %}
        {% endif %}

      {% elif current_state == state_interrupted %}

        {% if current_power <= power_value_off_max %}
          {% set next_state = state_off %}
        {% else %}
          {% set next_state = state_on %}
        {% endif %}
      
      {% endif %}
    
    {% endif %}

    {{ next_state }}
